/* A simple implementation of the stack data structure
 * 
 * @author Michael Wilson
 * @version 1.0
 */

public class MyStack {
   int size;
   Node top;   
   {
      size = 0;
      top = null;
   } 
   
   /* Adds an element to the stack
    * 
    * @param n The value to add
    */
   public void push(int n) {      
      if(top == null) {
         top = new Node(n);      
      } else {
         Node temp = top;
         Node newNode = new Node(n);
         newNode.setNext(temp);
         top = newNode;
      }
      size++;
   }
   
   /* Removes the top element from the stack
    * 
    * @return stack.isEmpty() ? null : top;
    */
   public Node pop() {
      if(top == null) return null;
      else {
         Node tempMarker = peek();
         top = top.next;
         size--;
         return tempMarker;   
      }
   }
   
   /* Takes a look at the top element in the stack
    * 
    * @return The top node
    */
   public Node peek() {
      return top;
   }
   
   // checks to see if the stack is empty
   public boolean isEmpty() {
      return size == 0;
   }
   
   /* Returns the size of the stack
    * 
    * @return The current size of the stack
    */
   public int getSize() {
      return size;
   }
   
   
   class Node {
      private int value;
      private Node next;
      
      // simple constructor
      public Node(int n) {
         this(n, null);
      }
      
      public Node(int n, Node next) {
    	  value = n;
    	  this.next = next;
      }
      
      /* Gets the value of the node
       * 
       * @return The value contained in this node
       */
      public int getValue() {
         return value;
      }
      
      /* Sets the next value of the node
       * 
       * @param nextNode The next node */
      public void setNext(Node nextNode) {
    	  next = nextNode;
      }
   }
   
}