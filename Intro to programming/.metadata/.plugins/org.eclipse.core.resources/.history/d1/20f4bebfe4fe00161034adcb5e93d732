/* General graph theory class
 * 
 * Â©Michael Wilson, 2017
 */

import java.util.*;

public class GraphClient {
	/* Keeps a reference to the graph */	
	private static final Graph myGraph;
	
	/* Using this static block to initialize the contents of the graph */
	static {
		/* First graph representation, has Euler circuit
		 a---b---c
		 |  | |  |
		 d---e---f
		 
		 */		
		int id = 0;
		List<Vertex> vertices = new ArrayList<Vertex>();
		for(int i = 0; i < 6; i++) {
			vertices.add(new Vertex((char)('a' + i)));
		}
		
		Set<Edge> edges = new HashSet<Edge>();
				
		edges.add(new Edge(vertices.get(0), vertices.get(1), id)); /* a --- b */
		id++;	
		edges.add(new Edge(vertices.get(0), vertices.get(3), id)); /* a --- d */
		id++;
		edges.add(new Edge(vertices.get(1), vertices.get(2), id)); /* b --- c */
		id++;
		edges.add(new Edge(vertices.get(2), vertices.get(5), id)); /* c --- f */
		id++;
		edges.add(new Edge(vertices.get(3), vertices.get(4), id)); /* d --- e */
		id++;
		edges.add(new Edge(vertices.get(4), vertices.get(5), id)); /* e --- f */
		id++;
		edges.add(new Edge(vertices.get(1), vertices.get(4), id)); /* b --- e */
		id++;
		edges.add(new Edge(vertices.get(1), vertices.get(4), id)); /* b --- e */
		
		/* update all of the degrees of each vertex respectively */
		for(Edge edge : edges) {
			edge.getDestination().incrementDegree();
			edge.getSource().incrementDegree();
		}
		
		/* Testing method that prints out all the vertex degrees
		 * a - 2
		 * b - 4
		 * c - 2
		 * d - 2
		 * e - 4
		 * f - 2 */
//		for(Vertex v: vertices) {
//			System.out.println(v.getName() + " - " + v.getDegree());
//		}
		
		myGraph = new Graph(edges, vertices);
	}
	
	/* Kicks off the program 
	 * 
	 * @param theArgs Arguments from the command line */
	public static void main(final String[] theArgs) {
		
	}
	
	/* Method that checks to see as to whether or not the graph contains an Euler cycle
	 * 
	 * @return Euler cycle ? true : false */
	private static boolean hasEulerCycle() {
		for()
		return true;
	}
}
